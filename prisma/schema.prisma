generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  Project       Project[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Table {
  id        String   @id @default(cuid(2))
  projectId String
  name      String
  created   DateTime @default(now()) @db.Timestamp(6)
  modified  DateTime @default(now()) @db.Timestamp(6)
  Column    Column[]
  Row       Row[]
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  View      View[]

  @@index([projectId])
}

model View {
  tableId       String
  name          String
  created       DateTime @default(now()) @db.Timestamp(6)
  modified      DateTime @default(now()) @db.Timestamp(6)
  id            String   @id @default(cuid(2))
  sorts         Json[]   @default([])
  filters       Json[]   @default([])
  hiddenColumns Int[]    @default([])
  Table         Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tableId])
}

model Column {
  id      Int      @id @default(autoincrement())
  tableId String
  name    String
  type    CellType
  Cell    Cell[]
  Table   Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tableId])
}

model Row {
  id      Int    @id @default(autoincrement())
  tableId String
  Cell    Cell[]
  Table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tableId])
}

model Project {
  id       String   @id @default(cuid(2))
  name     String
  userId   String
  created  DateTime @default(now()) @db.Timestamp(6)
  modified DateTime @default(now()) @db.Timestamp(6)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Table    Table[]
}

model Cell {
  columnId Int
  rowId    Int
  value    String
  id       Int    @id @default(autoincrement())
  Column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Row      Row    @relation(fields: [rowId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([value])
}

enum CellType {
  Text
  Number
}
